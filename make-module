#!/usr/bin/perl
# make-module file
#   Create a module based on the information in file.  

# +-------------+----------------------------------------------------
# | File Format |
# +-------------+

#   The first line is the name of the module.
#   Indents given by spaces (two spaces = 1 indent)
#   External references surrounded by curly braces
#   See the sample .module files for more information.

# +-------+----------------------------------------------------------
# | Notes |
# +-------+

# +-----------+------------------------------------------------------
# | Libraries |
# +-----------+

use HTTP::Request::Common;
use Canvas::Setup;
use Canvas::General;

# +-------+----------------------------------------------------------
# | Setup |
# +-------+

my $file = $ARGV[0];
# submitVerbose();

# +------+-----------------------------------------------------------
# | Main |
# +------+

open my $PORT, "< $file" or die "Could not open file '$file' because $!";
my $title = <$PORT>;
print $title;
chomp($title);
my $module_id = makeModule($title);
if (!$module_id) {
  exit 1;
}

my $position = 1;
while (my $line = <$PORT>) {
  my $newline = $line;
  chomp($line);
  $line =~ s/^( *)//;
  my $spaces = $1;
  my $indent = length($spaces)/2;

  # Content
  if ($line =~ m/^{/) {
    $line =~ s/^{//;
    $line =~ s/}$//;
    my ($type,$title,$content_id,$due,$other) = split(/;/,$line);
    if ($due) {
      $due = $due . "T23:59:59-05:00";
    }
    if ($type eq "Assignment") {
      if ($content_id eq "_") {
        $content_id = makeAssignment($title,$due,$other);
        if (!$content_id) {
          print STDERR "Could not make assignment $title.\n";
          exit 1;
        }
      }
      addModuleItem($module_id, "Assignment", $title, $content_id, 
                          $indent, $position)
        || die "Could not add assignment $title.";
    } # assignment
    elsif ($type eq "Discussion") {
      if ($content_id eq "_") {
        $content_id = makeDiscussion($title,$due,$other);
        if (!$content_id) {
          print STDERR "Could not make discussion $title.\n";
          exit 1;
        }
      }
      addModuleItem($module_id, "Discussion", $title, $content_id, 
                    $indent, $position)
        || die "Could not add assignment $title.";
    } # discussion
    elsif ($type eq "Page") {
      if ($content_id eq "_") {
        $content_id = makePage($title);
        if (!$content_id) {
          print STDERR "Could not make page $title.\n";
          exit 1;
        }
      }
      addModuleItem($module_id, "Page", $title, $content_id, 
                    $indent, $position)
        || die "Could not add assignment $title.";
    } # page
    else {
      print STDERR "Entry $title has unknown type: $type\n";
      exit 1;
    }
    $newline =~ s/;_;/;$content_id;/;
    $newline =~ s/;_}/;$content_id}/;
  } # if content

  # Headers
  elsif (! addSubHeader($module_id, $line, $indent, $position)) {
    print STDERR "Could not make sub header $line.\n";
    exit 1;
  }

  # Print the updated line
  print $newline;

  # And move on to the next position
  ++$position;
}

close $PORT;
exit 0;

# +---------+--------------------------------------------------------
# | Methods |
# +---------+

# addDiscussion(module,title,contentid,indent,position)
#   Add a discussion to a module
sub addDiscussion($$$$$)
{
  # Grab parameters
  my($module_id, $title, $content_id, $indent, $position) = @_;

  # Report
  print STDERR "Adding discussion $title (module: $module_id, cid: $content_id, indent: $indent, pos: $position)\n";

  # Set up the request
  my $req = POST canvasURL("items"),
                 [ 'module_item[title]' => "$title",
                   'module_item[type]' => "Discussion",
                   'module_item[content_id]' => $content_id,
                   'module_item[position]' => $position,
                   'module_item[indent]' => $indent ];

  # And submit it
  return submitRequest($req);
} # addDiscussion

# addModuleItem(module_id, type, title, content_id, indent, position)
sub addModuleItem($$$$$$)
{
  # Grab parameters
  my($module_id, $type, $title, $content_id, $indent, $position) = @_;

  # Report
  print STDERR "Adding item $title (module: $module_id, type: $type, cid: $content_id, indent: $indent, pos: $position)\n";

  # Set up the request
  my $req;
  if ($type eq "Page")  {
    $req = POST canvasURL("modules/$module_id/items"),
                [ 'module_item[title]' => $title,
                  'module_item[type]' => $type,
                  'module_item[page_url]' => $content_id,
                  'module_item[position]' => $position,
                  'module_item[indent]' => $indent ];
  }
  elsif ($type eq "ExternalURL") {
    $req = POST canvasURL("modules/$module_id/items"),
                [ 'module_item[title]' => $title,
                  'module_item[type]' => $type,
                  'module_item[external_url]' => $content_id,
                  'module_item[position]' => $position,
                  'module_item[indent]' => $indent ];
  }
  else {
    $req = POST canvasURL("modules/$module_id/items"),
                [ 'module_item[title]' => $title,
                  'module_item[type]' => $type,
                  'module_item[content_id]' => $content_id,
                  'module_item[position]' => $position,
                  'module_item[indent]' => $indent ];
  }

  # And submit it
  return submitRequest($req);
} # addModuleItem

sub addSubHeader($$$$)
{
  # Grab parameters
  my($module_id, $title, $indent, $position) = @_;

  # Status
  print STDERR "Making subheader $title (id: $module_id, indent: $indent, pos: $position)\n";

  # Set up request
  my $req = POST canvasURL("modules/$module_id/items"),
                 [ 'module_item[title]' => "$title",
                   'module_item[type]' => "SubHeader",
                   'module_item[position]' => $position,
                   'module_item[indent]' => $indent ];

  # And submit it
  return submitRequest($req);
} # addSubHeader

# Find an existing assignment by title.  Return the assignment id if
# we succeed, or the empty string otherwise.  Could still use some
# work.
sub findAssignment($)
{
  my ($title) = @_;

  # Get a possible id.
  my $exists = GET canvasURL("assignments?search_term=$title");
  if (my $id = submitRequest($exists)) {
    # Verify that the assignment with that id has the same title
    my $verify = GET canvasURL("assignments/$id");
    if (submitRequest($verify,"name") eq $title) {
      return $id;
    }
  }
  return "";
} # findAssignment

# Find an existing discussion by title.  Return the discussion id if
# we succeed, or the empty string otherwise.  Could still use some
# work.
sub findDiscussion($)
{
  my ($title) = @_;

  # Get a possible id.
  my $exists = GET canvasURL("discussion_topics?search_term=$title");
  if (my $id = submitRequest($exists)) {
    # Verify that the discussion with that id has the same title
    my $verify = GET canvasURL("discussion_topics/$id");
    if (submitRequest($verify,"title") eq $title) {
      return $id;
    }
  }
  return "";
} # findDiscussion

sub makeAssignment($;$$) {
  # Grab parameters
  my ($title,$due,$points) = @_;

  # Make sure we have a points value
  if (! $points) {
    $points = 10;
  }

  # Status
  print STDERR "Creating assignment '$title' due '$due'\n";

  # See if an assignment with the same name already exists.  (We try not
  # to duplicate assignment names.)
  if (my $id = findAssignment($title)) {
    print STDERR "  Assignment already exists as $id.\n";
    return $id;
  }

  # Set up the request
  my %params = ('assignment[name]' => "$title",
                'assignment[grading_type]' => "points",
                'assignment[points_possible]' => $points,
#              'assignment[submission_types][]' => '[online_upload,online_text_entry,online_url]'
               );
  if ($due) {
    $params{"assignment[due_at]"} = $due;
  }
  my $req = POST canvasURL("assignments"),
                 Content => \%params;
  
  # And do the work
  return submitRequest($req);
} # makeAssignment

# Create a discussion
sub makeDiscussion($;$$) {
  # Grab parameters
  my ($title,$due,$points) = @_;
  if (!$points) { $points = 10; }

  # Status
  print STDERR "Creating discussion '$title', due '$due', points '$points'\n";

  # See if a discussion with the same name already exists.  (We try not
  # to duplicate discussion names.)
  if (my $id = findDiscussion($title)) {
    print STDERR "  Discussion already exists as $id.\n";
    return $id;
  }

  # Set up the request
  my %params = ( 'title' => "$title",
                 'discussion_type' => "threaded",
                 'assignment[grading_type]' => "points",
                 'assignment[points_possible]' => $points );
  
  if ($due) {
    $params{"assignment[due_at]"} = $due;
  }
  my $req = POST canvasURL("discussion_topics"),
                 Content => \%params;
  
  # And do the work
  return submitRequest($req);
} # makeDiscussion

sub makeModule($) {
  # Grab parameters
  my ($title) = @_;

  # Status
  print STDERR "Creating module '$title'\n";

  # Set up the request
  my $req = POST canvasURL("modules"),
                 [ 'module[name]' => "$title",
                   'module[position]' => 1 ];
  return submitRequest($req);
} # makeModule

sub makePage($) 
{
  # Grab parameters
  my ($title) = @_;

  # Status
  print STDERR "Making page '$title'\n";

  # See if the page already exists
  my $pagename = titleToPageName($title);
  my $exists = GET canvasURL("pages/$pagename");
  if (my $url= submitRequest($exists,"url")) {
    print STDERR "  Page already exists as $url.\n";
    return $url;
  }

  # Set up the request
  my $req = POST canvasURL("pages"),
                 [ 'wiki_page[title]' => "$title"
                 ];
  
  # And do the work
  return submitRequest($req,"url");
} # makePage

sub titleToPageName($)
{
  my ($title) = @_;
  # Drop non-alphanumeric
  $title =~ s/[^a-zA-Z0-9]+/-/g;
  # Convert to lowercase
  $title = lc $title;
  # Normal case
  return $title;
} # titleToPageName
